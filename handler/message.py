from aiogram import Router, F
from aiogram.types import Message
from keyboards import reply, fabric
import sqlite3
from aiogram.enums import ChatAction
from aiogram import types

router = Router()
@router.message(F.text.lower().in_(["—Ö–∞–π", "—Ö–µ–ª–æ—É", "–ø—Ä–∏–≤–∏—Ç", "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π"]))
async def greetings(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ–µ—Ç!")

# @router.message()
# async def echos(message: Message):
#     if message.sticker:
#         path_img = "image/fox.jpg"
#         await message.reply_sticker(sticker=message.sticker.file_id)
#         await message.reply_photo(photo=types.FSInputFile(path=path_img))
@router.message()
async def echo(message: Message):
    msg = message.text.lower()
    db = sqlite3.connect('data/mifoda.by.db')
    cur = db.cursor()
    cur.execute("SELECT * FROM users WHERE name = ?", (message.from_user.id,))
    result = cur.fetchone()
    if msg == "–Ω–∞—á–∞—Ç—å –∏–≥—Ä—É":
        cur.execute(
            "UPDATE users SET active_game = ? WHERE name = ?" if result else "INSERT INTO users (name, active_game) VALUES (?, ?)",
            (1, message.from_user.id) if result else (message.from_user.id, 1)
        )
        db.commit()
        await message.answer("–í—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É")
    elif msg == '–º–µ–Ω—é –∏–≥—Ä—ã':
        await message.answer('–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –º–µ–Ω—é –∏–≥—Ä—ã', reply_markup=reply.game)
    elif msg == '–æ –±–æ—Ç–µ':
        await message.answer('–ë–æ—Çü¶ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–∞–ª–µ–Ω—å–∫—É—é –Ω–æ–≤–µ–ª–ª—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å. –ê —Ç–∞–∫–∂–µ –≤ –±–æ—Ç–∞ –≤—Å—Ç—Ä–æ–µ–Ω chatgpt 4!', reply_markup=reply.main)
    elif msg == '–≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', reply_markup=fabric.paginator())
    elif msg == '–∫—Ç–æ —Ä—è–¥–æ–º':
        if result != None:
            if result[4] == 'true':
                if result[5] == '–õ–µ—Å':
                    await message.answer(f"–ü—Ä–æ–≥—É–ª–∏–≤–∞—è—Å—å –ø–æ –ª–æ–∫–∞—Ü–∏–∏ '{result[5]}' –≤—ã –≤—Å—Ç—Ä–µ—á–∞–µ—Ç–µ", reply_markup=fabric.paginator_choose())
            else:
                await message.answer(f"–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
        else:
            await message.answer(f"–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É /start")
    elif msg == '—Å–ø—É—Å—Ç–∏—Ç—Å—è –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ':
        if result != None:
            if result[4] == 'true':
                if result[5] == '–õ–µ—Å':
                    path_img = "image/forest.gif"
                    await message.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.UPLOAD_PHOTO)
                    await message.reply_animation(animation=types.FSInputFile(path=path_img))
                    await message.answer(f"–í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ –õ–µ—Å–∞", reply_markup=fabric.paginator_dungeon())
            else:
                await message.answer(f"–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
        else:
            await message.answer(f"–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É /start")
    elif msg == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        if result != None:
            if result[4] == 'true':
                cur.execute("SELECT * FROM dungeon_safe WHERE name = ?", (message.from_user.id,))
                result_dangoen = cur.fetchone()
                cur.execute("SELECT relationship, relationship_npc FROM users WHERE name = ?", (message.from_user.id,))
                result_u = cur.fetchone()
                cur.execute("SELECT name_npc, mood, love FROM action_player_npc WHERE name = ?", (message.from_user.id,))
                all_npcs = cur.fetchall()
                answer_text = f"–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂: {result[3]}\n–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã: {result[8]}\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–¥–æ—Ä–æ–≤—å—è:{result_dangoen[2]}\n\n**–°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –∫–µ–º –≤—ã –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –∏ –∏—Ö –¥–æ–≤–µ—Ä–∏–µ:**\n"
                if all_npcs:
                    for npc in all_npcs:
                        answer_text += f"-{npc[0]} –¥–æ–≤–µ—Ä–∏–µ-{npc[1]} —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å-{npc[2]}\n"
                else:
                    answer_text += "- –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö NPC\n"
                if result_u[0] == 'true':
                    answer_text += f"-–í—ã –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å {result_u[1]} \n"
                await message.answer(answer_text)
            else:
                await message.answer(f"–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
        else:
            await message.answer(f"–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É /start")