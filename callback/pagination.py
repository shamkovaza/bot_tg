from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram import Router
from keyboards import fabric, reply
import sqlite3
import aiofiles
from aiogram.types import InputFile
import os
from aiogram import types
router = Router()
@router.callback_query(fabric.Pagination.filter(F.action.in_(["fox", "deer", "cat", "accept"])))
async def pagination_handler( call: CallbackQuery, callback_data: fabric.Pagination):
    db = sqlite3.connect('data/mifoda.by.db')
    cur = db.cursor()
    cur.execute("SELECT * FROM users WHERE name = ?", (call.from_user.id,))
    result = cur.fetchone()
    if result == None:
        await call.message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'", reply_markup=reply.main)
    else:
        if result[2] != 0:
            if result[4] != 'true':
                if callback_data.action == "fox":
                    cur.execute("UPDATE users SET rase = ? WHERE name = ?", ('–ª–∏—Å–∞', call.from_user.id,))
                    path_img = "image/fox.jpg"
                    await call.message.reply_photo(photo=types.FSInputFile(path=path_img), caption="–í–∞—à–∞ —Ä–∞—Å–∞ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –õ–∏—Å–∞.")
                    await call.answer(f"–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –õ–∏—Å ü¶ä")
                    db.commit()
                elif callback_data.action == "deer":
                    cur.execute("UPDATE users SET rase = ? WHERE name = ?", ('–æ–ª–µ–Ω—å', call.from_user.id,))
                    path_img = "image/deer.jpg"
                    await call.message.reply_photo(photo=types.FSInputFile(path=path_img), caption="–í–∞—à–∞ —Ä–∞—Å–∞ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –û–ª–µ–Ω—å.")
                    await call.answer(f"–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –û–ª–µ–Ω—å ü¶å")
                    db.commit()
                elif callback_data.action == "cat":
                    cur.execute("UPDATE users SET rase = ? WHERE name = ?", ('–∫–æ—Ç', call.from_user.id,))
                    path_img = "image/cat.jpg"
                    await call.message.reply_photo(photo=types.FSInputFile(path=path_img), caption="–í–∞—à–∞ —Ä–∞—Å–∞ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –ö–æ—Ç.")
                    await call.answer(f"–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –ö–æ—Ç üê±")
                    db.commit()
                elif callback_data.action == "accept":
                    if result[3] != '–Ω–∏—á–µ–≥–æ':
                        if result[4] == 'false':
                            cur.execute("UPDATE users SET is_race_choose = ? WHERE name = ?", ('true', call.from_user.id,))
                            await call.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {result[3]} üêæ")
                            db.commit()
                    else:
                        await call.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
            else:
                await call.message.answer(f"–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {result[3]} üêæ")
        else:
            await call.message.answer(f"–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É.")
    db.close()
    await call.answer()